Index: seal/src/main/res/layout/activity_new_friendlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- seal/src/main/res/layout/activity_new_friendlist.xml	(date 1557476078000)
+++ seal/src/main/res/layout/activity_new_friendlist.xml	(date 1557476078000)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:id="@+id/isData"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:text="@string/ac_new_friend_list_no_data"
+        android:textColor="@color/group_list_gray"
+        android:visibility="gone" />
+
+    <ListView
+        android:id="@+id/shiplistview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:divider="#dfdfdd"
+        android:dividerHeight="1px" />
+
+</FrameLayout>
\ No newline at end of file
Index: seal/src/main/java/cn/rongcloud/im/push/SealNotificationReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- seal/src/main/java/cn/rongcloud/im/push/SealNotificationReceiver.java	(date 1560308947000)
+++ seal/src/main/java/cn/rongcloud/im/push/SealNotificationReceiver.java	(date 1560308947000)
@@ -0,0 +1,38 @@
+package cn.rongcloud.im.push;
+
+import android.content.Context;
+import android.content.Intent;
+
+import io.rong.push.PushType;
+import io.rong.push.notification.PushMessageReceiver;
+import io.rong.push.notification.PushNotificationMessage;
+
+
+/**
+ * 通知广播， 可在此让法中进行通知消息处理和点击自定义跳转
+ */
+public class SealNotificationReceiver extends PushMessageReceiver {
+
+    @Override
+    public boolean onNotificationMessageArrived(Context context, PushType pushType, PushNotificationMessage message) {
+        return false;
+    }
+
+    @Override
+    public boolean onNotificationMessageClicked(Context context, PushType pushType, PushNotificationMessage message) {
+        if (!message.getSourceType().equals(PushNotificationMessage.PushSourceType.FROM_ADMIN)) {
+            String targetId = message.getTargetId();
+            //10000 为 Demo Server 加好友的 id，若 targetId 为 10000，则为加好友消息，默认跳转到 NewFriendListActivity
+            if (targetId != null && targetId.equals("10000")) {
+                context.startActivity(new Intent(context, NewFriendListActivity.class));
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public void onThirdPartyPushState(PushType pushType, String action, long resultCode) {
+        super.onThirdPartyPushState(pushType, action, resultCode);
+    }
+}
Index: seal/src/main/java/cn/rongcloud/im/ui/activity/NewFriendListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- seal/src/main/java/cn/rongcloud/im/ui/activity/NewFriendListActivity.java	(date 1560309043000)
+++ seal/src/main/java/cn/rongcloud/im/ui/activity/NewFriendListActivity.java	(date 1560309043000)
@@ -0,0 +1,212 @@
+package cn.rongcloud.im.ui.activity;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Date;
+import java.util.List;
+
+import cn.rongcloud.im.R;
+import cn.rongcloud.im.SealAppContext;
+import cn.rongcloud.im.SealUserInfoManager;
+import cn.rongcloud.im.db.Friend;
+import cn.rongcloud.im.server.broadcast.BroadcastManager;
+import cn.rongcloud.im.server.network.http.HttpException;
+import cn.rongcloud.im.server.pinyin.CharacterParser;
+import cn.rongcloud.im.server.response.AgreeFriendsResponse;
+import cn.rongcloud.im.server.response.UserRelationshipResponse;
+import cn.rongcloud.im.server.utils.CommonUtils;
+import cn.rongcloud.im.server.utils.NToast;
+import cn.rongcloud.im.server.widget.LoadDialog;
+import cn.rongcloud.im.ui.adapter.NewFriendListAdapter;
+
+
+public class NewFriendListActivity extends TitleBaseActivity implements NewFriendListAdapter.OnItemButtonClick, View.OnClickListener {
+
+    private static final int GET_ALL = 11;
+    private static final int AGREE_FRIENDS = 12;
+    public static final int FRIEND_LIST_REQUEST_CODE = 1001;
+    private ListView shipListView;
+    private NewFriendListAdapter adapter;
+    private String friendId;
+    private TextView isData;
+    private UserRelationshipResponse userRelationshipResponse;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_new_friendlist);
+        initView();
+        if (!CommonUtils.isNetworkConnected(mContext)) {
+            NToast.shortToast(mContext, R.string.check_network);
+            return;
+        }
+        LoadDialog.show(mContext);
+        request(GET_ALL);
+        adapter = new NewFriendListAdapter(mContext);
+        shipListView.setAdapter(adapter);
+    }
+
+    protected void initView() {
+        setTitle(R.string.new_friends);
+        shipListView = (ListView) findViewById(R.id.shiplistview);
+        isData = (TextView) findViewById(R.id.isData);
+        Button rightButton = getHeadRightButton();
+        rightButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.de_address_new_friend));
+        rightButton.setOnClickListener(this);
+    }
+
+
+    @Override
+    public Object doInBackground(int requestCode, String id) throws HttpException {
+        switch (requestCode) {
+            case GET_ALL:
+                return action.getAllUserRelationship();
+            case AGREE_FRIENDS:
+                return action.agreeFriends(friendId);
+        }
+        return super.doInBackground(requestCode, id);
+    }
+
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void onSuccess(int requestCode, Object result) {
+        if (result != null) {
+            switch (requestCode) {
+                case GET_ALL:
+                    userRelationshipResponse = (UserRelationshipResponse) result;
+
+                    if (userRelationshipResponse.getResult().size() == 0) {
+                        isData.setVisibility(View.VISIBLE);
+                        LoadDialog.dismiss(mContext);
+                        return;
+                    }
+
+                    Collections.sort(userRelationshipResponse.getResult(), new Comparator<UserRelationshipResponse.ResultEntity>() {
+
+                        @Override
+                        public int compare(UserRelationshipResponse.ResultEntity lhs, UserRelationshipResponse.ResultEntity rhs) {
+                            Date date1 = stringToDate(lhs);
+                            Date date2 = stringToDate(rhs);
+                            if (date1.before(date2)) {
+                                return 1;
+                            }
+                            return -1;
+                        }
+                    });
+
+                    List<UserRelationshipResponse.ResultEntity> userList = new ArrayList<>();
+                    for(UserRelationshipResponse.ResultEntity entity : userRelationshipResponse.getResult()){
+                        if(entity.getUser() != null){
+                            userList.add(entity);
+                        }
+                    }
+                    adapter.removeAll();
+                    adapter.addData(userList);
+
+                    adapter.notifyDataSetChanged();
+                    adapter.setOnItemButtonClick(this);
+                    LoadDialog.dismiss(mContext);
+                    break;
+                case AGREE_FRIENDS:
+                    AgreeFriendsResponse afres = (AgreeFriendsResponse) result;
+                    if (afres.getCode() == 200) {
+                        UserRelationshipResponse.ResultEntity bean = userRelationshipResponse.getResult().get(index);
+                        SealUserInfoManager.getInstance().addFriend(new Friend(bean.getUser().getId(),
+                                bean.getUser().getNickname(),
+                                Uri.parse(bean.getUser().getPortraitUri()),
+                                bean.getDisplayName(),
+                                String.valueOf(bean.getStatus()),
+                                null,
+                                null,
+                                null,
+                                CharacterParser.getInstance().getSpelling(bean.getUser().getNickname()),
+                                CharacterParser.getInstance().getSpelling(bean.getDisplayName())));
+                        // 通知好友列表刷新数据
+                        NToast.shortToast(mContext, R.string.agreed_friend);
+                        LoadDialog.dismiss(mContext);
+                        BroadcastManager.getInstance(mContext).sendBroadcast(SealAppContext.UPDATE_FRIEND);
+                        request(GET_ALL); //刷新 UI 按钮
+                    }
+
+            }
+        }
+    }
+
+
+    @Override
+    public void onFailure(int requestCode, int state, Object result) {
+        switch (requestCode) {
+            case GET_ALL:
+                break;
+
+        }
+    }
+
+
+    @Override
+    protected void onDestroy() {
+        if (adapter != null) {
+            adapter = null;
+        }
+        super.onDestroy();
+    }
+
+    private int index;
+
+    @Override
+    public boolean onButtonClick(int position, View view, int status) {
+        index = position;
+        switch (status) {
+            case 11: //收到了好友邀请
+                if (!CommonUtils.isNetworkConnected(mContext)) {
+                    NToast.shortToast(mContext, R.string.check_network);
+                    break;
+                }
+                LoadDialog.show(mContext);
+//                friendId = null;
+                friendId = userRelationshipResponse.getResult().get(position).getUser().getId();
+                request(AGREE_FRIENDS);
+                break;
+            case 10: // 发出了好友邀请
+                break;
+            case 21: // 忽略好友邀请
+                break;
+            case 20: // 已是好友
+                break;
+            case 30: // 删除了好友关系
+                break;
+        }
+        return false;
+    }
+
+    private Date stringToDate(UserRelationshipResponse.ResultEntity resultEntity) {
+        String updatedAt = resultEntity.getUpdatedAt();
+        String updatedAtDateStr = updatedAt.substring(0, 10) + " " + updatedAt.substring(11, 16);
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
+        Date updateAtDate = null;
+        try {
+            updateAtDate = simpleDateFormat.parse(updatedAtDateStr);
+        } catch (ParseException e) {
+            e.printStackTrace();
+        }
+        return updateAtDate;
+    }
+
+    @Override
+    public void onClick(View v) {
+        Intent intent = new Intent(NewFriendListActivity.this, SearchFriendActivity.class);
+        startActivityForResult(intent, FRIEND_LIST_REQUEST_CODE);
+    }
+}
Index: seal/src/main/java/cn/rongcloud/im/ui/adapter/NewFriendListAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- seal/src/main/java/cn/rongcloud/im/ui/adapter/NewFriendListAdapter.java	(date 1557476077000)
+++ seal/src/main/java/cn/rongcloud/im/ui/adapter/NewFriendListAdapter.java	(date 1557476077000)
@@ -0,0 +1,109 @@
+package cn.rongcloud.im.ui.adapter;
+
+import android.content.Context;
+import android.net.Uri;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import cn.rongcloud.im.App;
+import cn.rongcloud.im.R;
+import cn.rongcloud.im.SealUserInfoManager;
+import cn.rongcloud.im.server.response.UserRelationshipResponse;
+import cn.rongcloud.im.server.widget.SelectableRoundedImageView;
+import io.rong.imageloader.core.ImageLoader;
+import io.rong.imlib.model.UserInfo;
+
+@SuppressWarnings("deprecation")
+public class NewFriendListAdapter extends BaseAdapters {
+
+    public NewFriendListAdapter(Context context) {
+        super(context);
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+        ViewHolder holder;
+        if (convertView == null) {
+            holder = new ViewHolder();
+            convertView = mInflater.inflate(R.layout.rs_ada_user_ship, parent, false);
+            holder.mName = (TextView) convertView.findViewById(R.id.ship_name);
+            holder.mMessage = (TextView) convertView.findViewById(R.id.ship_message);
+            holder.mHead = (SelectableRoundedImageView) convertView.findViewById(R.id.new_header);
+            holder.mState = (TextView) convertView.findViewById(R.id.ship_state);
+            convertView.setTag(holder);
+        } else {
+            holder = (ViewHolder) convertView.getTag();
+        }
+        final UserRelationshipResponse.ResultEntity bean = (UserRelationshipResponse.ResultEntity) dataSet.get(position);
+        holder.mName.setText(bean.getUser().getNickname());
+        String portraitUri = null;
+        if (bean != null && bean.getUser() != null) {
+            UserRelationshipResponse.ResultEntity.UserEntity userEntity = bean.getUser();
+            portraitUri = SealUserInfoManager.getInstance().getPortraitUri(new UserInfo(
+                              userEntity.getId(), userEntity.getNickname(), Uri.parse(userEntity.getPortraitUri())));
+        }
+        ImageLoader.getInstance().displayImage(portraitUri, holder.mHead, App.getOptions());
+        holder.mMessage.setText(bean.getMessage());
+        holder.mState.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (mOnItemButtonClick != null) {
+                    mOnItemButtonClick.onButtonClick(position, v, bean.getStatus());
+                }
+            }
+        });
+
+        switch (bean.getStatus()) {
+            case 11: //收到了好友邀请
+                holder.mState.setText(R.string.agree);
+                holder.mState.setBackgroundDrawable(mContext.getResources().getDrawable(R.drawable.de_add_friend_selector));
+                break;
+            case 10: // 发出了好友邀请
+                holder.mState.setText(R.string.request);
+                holder.mState.setBackgroundDrawable(null);
+                break;
+            case 21: // 忽略好友邀请
+                holder.mState.setText(R.string.ignore);
+                holder.mState.setBackgroundDrawable(null);
+                break;
+            case 20: // 已是好友
+                holder.mState.setText(R.string.added);
+                holder.mState.setBackgroundDrawable(null);
+                break;
+            case 30: // 删除了好友关系
+                holder.mState.setText(R.string.deleted);
+                holder.mState.setBackgroundDrawable(null);
+                break;
+        }
+        return convertView;
+    }
+
+    /**
+     * displayName :
+     * message : 手机号:18622222222昵称:的用户请求添加你为好友
+     * status : 11
+     * updatedAt : 2016-01-07T06:22:55.000Z
+     * user : {"id":"i3gRfA1ml","nickname":"nihaoa","portraitUri":""}
+     */
+
+    class ViewHolder {
+        SelectableRoundedImageView mHead;
+        TextView mName;
+        TextView mState;
+        //        TextView mtime;
+        TextView mMessage;
+    }
+
+    OnItemButtonClick mOnItemButtonClick;
+
+
+    public void setOnItemButtonClick(OnItemButtonClick onItemButtonClick) {
+        this.mOnItemButtonClick = onItemButtonClick;
+    }
+
+    public interface OnItemButtonClick {
+        boolean onButtonClick(int position, View view, int status);
+
+    }
+}
Index: seal/src/main/java/cn/rongcloud/im/ui/activity/ConversationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.rongcloud.im.ui.activity;\n\nimport android.annotation.TargetApi;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.inputmethod.InputMethodManager;\n\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.lifecycle.Observer;\nimport androidx.lifecycle.ViewModelProviders;\n\nimport java.util.Locale;\n\nimport cn.rongcloud.im.R;\nimport cn.rongcloud.im.model.TypingInfo;\nimport cn.rongcloud.im.ui.fragment.ConversationFragmentEx;\nimport cn.rongcloud.im.ui.view.AnnouceView;\nimport cn.rongcloud.im.ui.view.SealTitleBar;\nimport cn.rongcloud.im.viewmodel.ConversationViewModel;\nimport io.rong.imkit.RongIM;\nimport io.rong.imkit.RongKitIntent;\nimport io.rong.imlib.model.Conversation;\n\n//CallKit start 1\n//CallKit end 1\n\n/**\n * 会话页面\n * 1，设置 ActionBar title\n * 2，加载会话页面\n * 3，push 和 通知 判断\n */\npublic class ConversationActivity extends TitleBaseActivity {\n\n    private String TAG = ConversationActivity.class.getSimpleName();\n\n\n    /**\n     * 是否在讨论组内，如果不在讨论组内，则进入不到讨论组设置页面\n     */\n    private boolean isFromPush = false;\n//    private LoadingDialog mDialog;\n//    private SharedPreferences sp;\n    private ConversationFragmentEx fragment;\n\n\n    //    private Button mRightButton;\n    private AnnouceView annouceView;\n    private ConversationViewModel conversationViewModel;\n    private String title;\n    /**\n     * 对方id\n     */\n    private String targetId;\n    /**\n     * 会话类型\n     */\n    private Conversation.ConversationType conversationType;\n\n    @Override\n    @TargetApi(23)\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.conversation_activity_conversation);\n\n        // 没有intent 的则直接返回\n        Intent intent = getIntent();\n        if (intent == null || intent.getData() == null) {\n            finish();\n            return;\n        }\n\n        targetId = intent.getData().getQueryParameter(\"targetId\");\n        conversationType = Conversation.ConversationType.valueOf(intent.getData()\n                .getLastPathSegment().toUpperCase(Locale.US));\n        title = intent.getData().getQueryParameter(\"title\");\n\n        initView();\n        initViewModel();\n\n//        sp = getSharedPreferences(\"config\", MODE_PRIVATE);\n//        mDialog = new LoadingDialog(this);\n\n//TODO 理应是在 Push 中做跳转的\n//        mTargetId = intent.getData().getQueryParameter(\"targetId\");\n//        //10000 为 Demo Server 加好友的 id，若 targetId 为 10000，则为加好友消息，默认跳转到 NewFriendListActivity\n//        // Demo 逻辑\n//        if (mTargetId != null && mTargetId.equals(\"10000\")) {\n//            startActivity(new Intent(ConversationActivity.this, NewFriendListActivity.class));\n//            return;\n//        }\n\n\n//        isPushMessage(intent);\n\n//        SealAppContext.getInstance().pushActivity(this);\n\n        //TODO ？？？ callkit\n//        //CallKit start 2\n//        RongCallKit.setGroupMemberProvider(new RongCallKit.GroupMembersProvider() {\n//            @Override\n//            public ArrayList<String> getMemberList(String groupId, final RongCallKit.OnGroupMembersResult result) {\n//                getGroupMembersForCall();\n//                mCallMemberResult = result;\n//                return null;\n//            }\n//        });\n\n\n        //CallKit end 2\n    }\n\n    private void initViewModel() {\n        conversationViewModel = ViewModelProviders.of(this, new ConversationViewModel.Factory(targetId, conversationType, title, this.getApplication())).get(ConversationViewModel.class);\n\n        conversationViewModel.getTitleStr().observe(this, new Observer<String>() {\n            @Override\n            public void onChanged(String title) {\n                if (TextUtils.isEmpty(title)) {\n                    if (conversationType == null) {\n                        return;\n                    }\n                    int titleResId;\n                    if (conversationType.equals(Conversation.ConversationType.DISCUSSION)) {\n                        titleResId = R.string.seal_conversation_title_discussion_group;\n                    } else if (conversationType.equals(Conversation.ConversationType.SYSTEM)) {\n                        titleResId = R.string.seal_conversation_title_system;\n                    } else if (conversationType.equals(Conversation.ConversationType.CUSTOMER_SERVICE)) {\n                        titleResId = R.string.seal_conversation_title_feedback;\n                    } else {\n                        titleResId = R.string.seal_conversation_title_defult;\n                    }\n                    getTitleBar().setTitle(titleResId);\n\n                } else {\n                    getTitleBar().setTitle(title);\n                }\n            }\n        });\n\n        // 正在输入状态\n        conversationViewModel.getTypingStatusInfo().observe(this, new Observer<TypingInfo>() {\n            @Override\n            public void onChanged(TypingInfo typingInfo) {\n                if (typingInfo == null) {\n                    return;\n                }\n\n                if (typingInfo.conversationType == conversationType && typingInfo.targetId.equals(targetId)) {\n                    if (typingInfo.typingList == null) {\n                        getTitleBar().setType(SealTitleBar.Type.NORMAL);\n                    } else {\n                        TypingInfo.Typing typing = typingInfo.typingList.get(typingInfo.typingList.size() - 1);\n                        getTitleBar().setType(SealTitleBar.Type.TYPING);\n                        if (typing.type == TypingInfo.Typing.Type.text) {\n                            getTitleBar().setTyping(R.string.seal_conversation_remote_side_is_typing);\n                        } else if (typing.type == TypingInfo.Typing.Type.voice) {\n                            getTitleBar().setTyping(R.string.seal_conversation_remote_side_speaking);\n                        }\n                    }\n                }\n            }\n        });\n\n    }\n\n\n    private void initView() {\n        initTitleBar(conversationType, targetId);\n        initAnnouceView();\n        initConversationFragment();\n    }\n\n    private void initConversationFragment() {\n        /**\n         * 加载会话界面 。 ConversationFragmentEx 继承自 ConversationFragment\n         */\n        fragment = new ConversationFragmentEx();\n//        Uri uri = Uri.parse(\"rong://\" + getApplicationInfo().packageName).buildUpon()\n//                .appendPath(\"conversation\").appendPath(mConversationType.getName().toLowerCase())\n//                .appendQueryParameter(\"targetId\", mTargetId).build();\n//\n//        fragment.setUri(uri);\n\n        // 自定义的服务才会有通知监听\n        if (conversationType.equals(Conversation.ConversationType.CUSTOMER_SERVICE)) {\n            // 设置通知监听\n            fragment.setOnShowAnnounceBarListener(new ConversationFragmentEx.OnShowAnnounceListener() {\n                @Override\n                public void onShowAnnounceView(String announceMsg, final String announceUrl) {\n                    annouceView.setVisibility(View.VISIBLE);\n                    annouceView.setAnnounce(announceMsg, announceUrl);\n                }\n            });\n        }\n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n        //xxx 为你要加载的 id\n        transaction.add(R.id.rong_content, fragment);\n        transaction.commitAllowingStateLoss();\n    }\n\n    private void initAnnouceView() {\n        // 初始化通知布局\n        annouceView = findViewById(R.id.view_annouce);\n        annouceView.setVisibility(View.GONE);\n        annouceView.setOnAnnounceClickListener(new AnnouceView.OnAnnounceClickListener() {\n            @Override\n            public void onClick(View v, String url) {\n                String str = url.toLowerCase();\n                if (!TextUtils.isEmpty(str)) {\n                    if (!str.startsWith(\"http\") && !str.startsWith(\"https\")) {\n                        str = \"http://\" + str;\n                    }\n                    Intent intent = new Intent(RongKitIntent.RONG_INTENT_ACTION_WEBVIEW);\n                    intent.setPackage(v.getContext().getPackageName());\n                    intent.putExtra(\"url\", str);\n                    v.getContext().startActivity(intent);\n                }\n            }\n        });\n    }\n\n    /**\n     * 初始化 title\n     *\n     * @param conversationType\n     * @param targetId\n     */\n    private void initTitleBar(Conversation.ConversationType conversationType, String targetId) {\n        // title 布局设置\n        // 左边返回按钮\n        getTitleBar().setOnBtnLeftClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                //TODO\n//                if (fragment != null && !fragment.onBackPressed()) {\n//                    if (fragment.isLocationSharing()) {\n//                        fragment.showQuitLocationSharingDialog(this);\n//                        return;\n//                    }\n//                    hintKbTwo();\n//                    if (isFromPush) {\n//                        isFromPush = false;\n//                        startActivity(new Intent(this, MainActivity.class));\n//                    }\n//                    if (mConversationType.equals(Conversation.ConversationType.CHATROOM)\n//                            || mConversationType.equals(Conversation.ConversationType.CUSTOMER_SERVICE)) {\n//                        SealAppContext.getInstance().popActivity(this);\n//                    } else {\n//                        SealAppContext.getInstance().popAllActivity();\n//                    }\n//                }\n                finish();\n            }\n        });\n\n\n        getTitleBar().getBtnRight().setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                toDetailActivity(conversationType, targetId);\n            }\n        });\n\n        if (conversationType.equals(Conversation.ConversationType.GROUP)) {\n            getTitleBar().getBtnRight().setImageDrawable(getResources().getDrawable(R.drawable.seal_detail_group));\n        } else if (conversationType.equals(Conversation.ConversationType.PRIVATE)\n                || conversationType.equals(Conversation.ConversationType.PUBLIC_SERVICE)\n                || conversationType.equals(Conversation.ConversationType.APP_PUBLIC_SERVICE)\n                || conversationType.equals(Conversation.ConversationType.DISCUSSION)) {\n            getTitleBar().getBtnRight().setImageDrawable(getResources().getDrawable(R.drawable.seal_detail_single));\n        } else {\n            getTitleBar().getBtnRight().setVisibility(View.GONE);\n        }\n    }\n\n//    /**\n//     * 判断是否是 Push 消息，判断是否需要做 connect 操作\n//     */\n//    private void isPushMessage(Intent intent) {\n//\n//        if (intent == null || intent.getData() == null)\n//            return;\n//        //push\n//        if (intent.getData().getScheme().equals(\"rong\") && intent.getData().getQueryParameter(\"isFromPush\") != null) {\n//\n//            //通过intent.getData().getQueryParameter(\"push\") 为true，判断是否是push消息\n//            if (intent.getData().getQueryParameter(\"isFromPush\").equals(\"true\")) {\n//                //只有收到系统消息和不落地 push 消息的时候，pushId 不为 null。而且这两种消息只能通过 server 来发送，客户端发送不了。\n//                //RongIM.getInstance().getRongIMClient().recordNotificationEvent(id);\n//                if (mDialog != null && !mDialog.isShowing()) {\n//                    mDialog.show();\n//                }\n//                isFromPush = true;\n//                enterActivity();\n//            } else if (RongIM.getInstance().getCurrentConnectionStatus().equals(RongIMClient.ConnectionStatusListener.ConnectionStatus.DISCONNECTED)) {\n//                if (mDialog != null && !mDialog.isShowing()) {\n//                    mDialog.show();\n//                }\n//                if (intent.getData().getPath().contains(\"conversation/system\")) {\n//                    Intent intent1 = new Intent(mContext, MainActivity.class);\n//                    intent1.putExtra(\"systemconversation\", true);\n//                    startActivity(intent1);\n//                    SealAppContext.getInstance().popAllActivity();\n//                    return;\n//                }\n//                enterActivity();\n//            } else {\n//                if (intent.getData().getPath().contains(\"conversation/system\")) {\n//                    Intent intent1 = new Intent(mContext, MainActivity.class);\n//                    intent1.putExtra(\"systemconversation\", true);\n//                    startActivity(intent1);\n//                    SealAppContext.getInstance().popAllActivity();\n//                    return;\n//                }\n//                enterFragment(mConversationType, mTargetId);\n//            }\n//\n//        } else {\n//            if (RongIM.getInstance().getCurrentConnectionStatus().equals(RongIMClient.ConnectionStatusListener.ConnectionStatus.DISCONNECTED)) {\n//                if (mDialog != null && !mDialog.isShowing()) {\n//                    mDialog.show();\n//                }\n//                new Handler().postDelayed(new Runnable() {\n//                    @Override\n//                    public void run() {\n//                        enterActivity();\n//                    }\n//                }, 300);\n//            } else {\n//                enterFragment(mConversationType, mTargetId);\n//            }\n//        }\n//    }\n\n\n//    /**\n//     * 收到 push 消息后，选择进入哪个 Activity\n//     * 如果程序缓存未被清理，进入 MainActivity\n//     * 程序缓存被清理，进入 LoginActivity，重新获取token\n//     * <p>\n//     * 作用：由于在 manifest 中 intent-filter 是配置在 ConversationActivity 下面，所以收到消息后点击notifacition 会跳转到 DemoActivity。\n//     * 以跳到 MainActivity 为例：\n//     * 在 ConversationActivity 收到消息后，选择进入 MainActivity，这样就把 MainActivity 激活了，当你读完收到的消息点击 返回键 时，程序会退到\n//     * MainActivity 页面，而不是直接退回到 桌面。\n//     */\n//    private void enterActivity() {\n//\n//        String token = sp.getString(\"loginToken\", \"\");\n//\n//        if (token.equals(\"default\")) {\n//            NLog.e(\"ConversationActivity push\", \"push2\");\n//            startActivity(new Intent(ConversationActivity.this, LoginActivity.class));\n//            SealAppContext.getInstance().popAllActivity();\n//        } else {\n//            NLog.e(\"ConversationActivity push\", \"push3\");\n//            reconnect(token);\n//        }\n//    }\n\n//    private void reconnect(String token) {\n//        RongIM.connect(token, new RongIMClient.ConnectCallback() {\n//            @Override\n//            public void onTokenIncorrect() {\n//\n//                Log.e(TAG, \"---onTokenIncorrect--\");\n//            }\n//\n//            @Override\n//            public void onSuccess(String s) {\n//                Log.i(TAG, \"---onSuccess--\" + s);\n//                NLog.e(\"ConversationActivity push\", \"push4\");\n//\n//                if (mDialog != null)\n//                    mDialog.dismiss();\n//\n//                enterFragment(mConversationType, mTargetId);\n//\n//            }\n//\n//            @Override\n//            public void onError(RongIMClient.ErrorCode e) {\n//                Log.e(TAG, \"---onError--\" + e);\n//                if (mDialog != null)\n//                    mDialog.dismiss();\n//\n//                enterFragment(mConversationType, mTargetId);\n//            }\n//        });\n//\n//    }\n\n\n    /**\n     * 根据 targetid 和 ConversationType 进入到设置页面\n     */\n    private void toDetailActivity(Conversation.ConversationType conversationType, String targetId) {\n\n        if (conversationType == Conversation.ConversationType.PUBLIC_SERVICE\n                || conversationType == Conversation.ConversationType.APP_PUBLIC_SERVICE) {\n\n            RongIM.getInstance().startPublicServiceProfile(this, conversationType, targetId);\n        } else {\n\n//            //得到讨论组的 targetId\n//            if (TextUtils.isEmpty(targetId)) {\n//                NToast.shortToast(mContext, mContext.getString(R.string.discussion_group_not_created));\n//            }\n\n            //TODO 跳转详情\n//            Intent intent = null;\n//            if (conversationType == Conversation.ConversationType.GROUP) {\n//                intent = new Intent(this, GroupDetailActivity.class);\n//                intent.putExtra(\"conversationType\", Conversation.ConversationType.GROUP);\n//            } else if (conversationType == Conversation.ConversationType.PRIVATE) {\n//                intent = new Intent(this, PrivateChatDetailActivity.class);\n//                intent.putExtra(\"conversationType\", Conversation.ConversationType.PRIVATE);\n//            } else if (conversationType == Conversation.ConversationType.DISCUSSION) {\n//                intent = new Intent(this, DiscussionDetailActivity.class);\n//                intent.putExtra(\"TargetId\", targetId);\n//                startActivityForResult(intent, 166);\n//                return;\n//            }\n//            intent.putExtra(\"TargetId\", targetId);\n//            if (intent != null) {\n//                startActivityForResult(intent, 500);\n//            }\n\n        }\n    }\n\n\n    @Override\n    protected void onDestroy() {\n//        //CallKit start 3\n//        RongCallKit.setGroupMemberProvider(null);\n//        //CallKit end 3\n//        SealAppContext.getInstance().popActivity(this);\n        super.onDestroy();\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if (KeyEvent.KEYCODE_BACK == event.getKeyCode()) {\n            if (fragment != null && !fragment.onBackPressed()) {\n                if (isFromPush) {\n                    isFromPush = false;\n                    startActivity(new Intent(this, MainActivity.class));\n//                    SealAppContext.getInstance().popAllActivity();\n                } else {\n                    if (fragment.isLocationSharing()) {\n                        fragment.showQuitLocationSharingDialog(this);\n                        return true;\n                    }\n                    if (conversationType.equals(Conversation.ConversationType.CHATROOM)\n                            || conversationType.equals(Conversation.ConversationType.CUSTOMER_SERVICE)) {\n//                        SealAppContext.getInstance().popActivity(this);\n                    } else {\n//                        SealAppContext.getInstance().popActivity(this);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private void hintKbTwo() {\n        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n        if (imm.isActive() && getCurrentFocus() != null) {\n            if (getCurrentFocus().getWindowToken() != null) {\n                imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n            }\n        }\n    }\n\n//    //CallKit start 4\n//    private RongCallKit.OnGroupMembersResult mCallMemberResult;\n//\n//    private void getGroupMembersForCall() {\n//        SealUserInfoManager.getInstance().getGroupMembers(mTargetId, new SealUserInfoManager.ResultCallback<List<GroupMember>>() {\n//            @Override\n//            public void onSuccess(List<GroupMember> groupMembers) {\n//                ArrayList<String> userIds = new ArrayList<>();\n//                if (groupMembers != null) {\n//                    for (GroupMember groupMember : groupMembers) {\n//                        if (groupMember != null) {\n//                            userIds.add(groupMember.getUserId());\n//                        }\n//                    }\n//                }\n//                mCallMemberResult.onGotMemberList(userIds);\n//            }\n//\n//            @Override\n//            public void onError(String errString) {\n//                mCallMemberResult.onGotMemberList(null);\n//            }\n//        });\n//    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- seal/src/main/java/cn/rongcloud/im/ui/activity/ConversationActivity.java	(date 1560305895000)
+++ seal/src/main/java/cn/rongcloud/im/ui/activity/ConversationActivity.java	(date 1560308986000)
@@ -85,16 +85,6 @@
 //        sp = getSharedPreferences("config", MODE_PRIVATE);
 //        mDialog = new LoadingDialog(this);
 
-//TODO 理应是在 Push 中做跳转的
-//        mTargetId = intent.getData().getQueryParameter("targetId");
-//        //10000 为 Demo Server 加好友的 id，若 targetId 为 10000，则为加好友消息，默认跳转到 NewFriendListActivity
-//        // Demo 逻辑
-//        if (mTargetId != null && mTargetId.equals("10000")) {
-//            startActivity(new Intent(ConversationActivity.this, NewFriendListActivity.class));
-//            return;
-//        }
-
-
 //        isPushMessage(intent);
 
 //        SealAppContext.getInstance().pushActivity(this);
